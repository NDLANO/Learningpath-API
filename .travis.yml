notifications:
  slack:
    on_success: change
    on_failure: always
    rooms:
      secure: paeTquzIGDorOcaDY/4DyMuU7LWiwkrZRJcxfMO1UHLy02AvhasrG/Xb67dgjAlzdfH9o4v4jqTI7/AQ1D0XW7UU41x0NG+bT7XC4JIFTV4Rx7uWUIG3VO5H4N0DhF8B403TsT/9oPel1p0ECk+eXwCuXcSGmwBBaBaYNEu8VZiAE1axP2Iv9QrmynOKI3dFoCoKJljmMnSksFgIIbzkLydlK1TvWwxsFH6RHhgYgvGOef0NPXdrt7LB7azDYMpBOxL5HNQsnanzX0WI9lM3KnW5At+9giAar4XaC+92LJhS83fLITEUSoW0bcgWUZUujN0JnkBvJn4lZBH+Bsko9DfldS5KFMGH7jGKST0vFplBRC1m2MZ/PcBkKZqe6rLmaVOPvZIr88HOSF7j18CmKxTvRpdGc/Q7kiFb8pH5TBXkTAPuh/fNw4UISB+CAYSUfXxpL0DHXtEqrC17tVnQViyIKXzglUi6UGIX6mP4c3dp2ALg4YKMWo0cFoAhMj3FMuFQY7YZuYCORIsobMWI+JKTjJ26XJKlEuz0CC4yab4E6HZ3b2sn83s6y8CXILzBK/0w7lSKKaPUwCBcZgSZg0tQXZqB4VI7JGYm7pJj3UcQ8hbf7gzrF/Sm75RiCZy7HI7FdnvKcPhhAXgsPC9rEn7QAzImQftD4r8kS1krUIw=
matrix:
  fast_finish: true
  include:
    - name: "Test"

      env:
        - META_PASSWORD=""
      services:
        - postgresql
      before_script:
        - psql -c 'drop database if exists test_db;' -U postgres
        - psql -c 'create database test_db;' -U postgres
      addons:
        postgresql: '9.5'

      language: scala
      dist: trusty
      scala:
          - 2.12.7
      jdk:
        - oraclejdk8
      cache:
        directories:
          - $HOME/.ivy2/cache
          - $HOME/.sbt/boot/
      before_cache:
        # Tricks to avoid unnecessary cache updates
        - find $HOME/.ivy2 -name "ivydata-*.properties" -delete
        - find $HOME/.sbt -name "*.lock" -delete

    - name: "Release"
      language: python
      # if: branch = master AND type = push
      python: 3.7
      dist: bionic
      services:
        - docker
      cache:
        pip: true
        directories:
          - $HOME/.ivy2/cache
          - $HOME/.sbt/boot/
      before_install:
        # Authenticate docker client to deploy aws registry
        - pip install awscli
        - $(aws ecr get-login --no-include-email --region eu-west-1)

        # Fetch deploy repo
        - git clone --depth 1 https://knowit-at-ndla:$TRAVIS_RELEASE_GITHUB_TOKEN@github.com/ndlano/deploy.git ../deploy

        # Setup env
        - export NDLA_HOME=$(realpath $(pwd)/../)
        - export NDLA_DEPLOY=$NDLA_HOME/deploy
        - export DEPLOY_VERSION=$(git -C $NDLA_DEPLOY rev-parse --short=7 HEAD)
        - export DEPLOY_DOCKER_REPO=784120951859.dkr.ecr.eu-west-1.amazonaws.com/ndla/deploy

        # Get cache, and don't fail if missing
        - docker pull $DEPLOY_DOCKER_REPO:$DEPLOY_VERSION || true
      install:
        - eval "$($NDLA_DEPLOY/scripts/bin/ndla init -)"
      env:
        - SSH_AUTH_SOCK=/tmp/mock_sock
      script:
        - ndla release test learningpath-api --update-chart
        - ndla release staging learningpath-api

      before_cache: # Save docker image as cache
        - docker push $DEPLOY_DOCKER_REPO:$DEPLOY_VERSION

        # Tricks to avoid unnecessary cache updates
        - find $HOME/.ivy2 -name "ivydata-*.properties" -delete
        - find $HOME/.sbt -name "*.lock" -delete

  allow_failures:
      - name: "Release"
    
